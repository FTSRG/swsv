 @Manual{ieee-24765,
   author={{Institute of Electrical and Electronics Engineers}},
   shortauthor = {IEEE},
   title={Systems and software engineering -- Vocabulary},
   year={2010},
   month={12},
   pages={1 -- 418},  
   doi={10.1109/IEEESTD.2010.5733835},
   note = {Standard 24765:2010}
 }
 
 @book{myers-1979,
	author = {Myers, Glenford J.},
	title = {Art of Software Testing},
	year = {1979},
	isbn = {0471043281},
	publisher = {John Wiley \& Sons, Inc.},
	address = {New York, NY, USA},
    annotation = {A must read classical book on software testing.}
}

@article{Anand13,
	title = {An orchestrated survey of methodologies for automated software test case generation},
	journal = {J. Syst. Software},
	volume = {86},
	number = {8},
	pages = {1978 - 2001},
	year = {2013},		
	doi = "10.1016/j.jss.2013.02.061",
	author = {Saswat Anand and Edmund K. Burke and Tsong Yueh Chen and John Clark and Myra B. Cohen and Wolfgang Grieskamp and Mark Harman and Mary Jean Harrold and Phil McMinn},
}

@misc{htb-glossary,
    author = {{Hungarian Testing Board}},
    shortauthor = {HTB},
    title = {Hungarian standard glossary of terms used in Software Testing},
    year = {2014},
    url = {http://www.hstqb.org/index.php?title=Downloads}
}

@misc{istqb-glossary,
    author = {{International Software Testing Qualifications Board}},
    shortauthor = {ISTQB},
    title = {Standard Glossary of Terms used in Software Testing},
    year = {2016},
    url = {http://www.istqb.org/downloads/glossary.html}
}

@Manual{omg-uml2,
    author={{Object Management Group}},
    shortauthor = {OMG},
    title={{Unified Modeling Language (UML) 2.5 Specification}},
    note = {formal/2015-03-01},
    year={2015},
}

@phdthesis{pinter-phd,
    address = {Budapest, Hungary},
    school = {Budapest University of Technology and Economics, Department of
    Measurement and Information Systems},
    title = {{Model Based Program Synthesis and Runtime Error Detection for
    Dependable Embedded Systems}},
    author = {Gergely Pint{\'e}r},
    year = 2007,
}

@misc{carmack-2011,
    author = {John Carmack},
    title = {In-Depth: Static Code Analysis},
    year = {2011},
    url = {http://www.gamasutra.com/view/news/128836/InDepth_Static_Code_Analysis.php},
    note = {Gamasutra}
}

@inbook{swebok-testing,
    title = {Software Testing},
    booktitle = {Guide to the Software Engineering Body of Knowledge},
    date = {2014},
    editor = {Antonia Bertolino and Eda Marchetti},
    edition = {Version 3.0},
    publisher = {IEEE Computer Society},
    url = {https://www.computer.org/web/swebok},
}

@article{findbugs-2008,
    title = {Experiences Using Static Analysis to Find Bugs},
    author = {Nathaniel Ayewah and David Hovemeyer and J. David Morgenthaler and John Penix and William Pugh},
    year  = 2008,    
    journal = {IEEE Software},
    pages = {22--29},
    volume  = {25},
    doi = {10.1109/MS.2008.130}
}

@article{coverity-2010,
    author = {Bessey, Al and Block, Ken and Chelf, Ben and Chou, Andy and Fulton, Bryan and Hallem, Seth and Henri-Gros, Charles and Kamsky, Asya and McPeak, Scott and Engler, Dawson},
    title = {A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World},
    journal = {Commun. ACM},
    volume = {53},
    number = {2},
    year = {2010},
    pages = {66--75},
    doi = {10.1145/1646353.1646374},
    publisher = {ACM},
}

@ARTICLE{oracle-survey, 
    author={E. T. Barr and M. Harman and P. McMinn and M. Shahbaz and S. Yoo}, 
    journal={IEEE Transactions on Software Engineering}, 
    title={The Oracle Problem in Software Testing: A Survey}, 
    year={2015}, 
    volume={41}, 
    number={5}, 
    pages={507-525}, 
    abstract={Testing involves examining the behaviour of a system in order to discover potential faults. Given an input for a system, the challenge of distinguishing the corresponding desired, correct behaviour from potentially incorrect behavior is called the “test oracle problem”. Test oracle automation is important to remove a current bottleneck that inhibits greater overall test automation. Without test oracle automation, the human has to determine whether observed behaviour is correct. The literature on test oracles has introduced techniques for oracle automation, including modelling, specifications, contract-driven development and metamorphic testing. When none of these is completely adequate, the final source of test oracle information remains the human, who may be aware of informal specifications, expectations, norms and domain specific information that provide informal oracle guidance. All forms of test oracles, even the humble human, involve challenges of reducing cost and increasing benefit. This paper provides a comprehensive survey of current approaches to the test oracle problem and an analysis of trends in this important area of software testing research and practice.}, 
    doi={10.1109/TSE.2014.2372785}, 
}